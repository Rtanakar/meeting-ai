import { Suspense } from "react"; // Suspense: async components เคเฅ เคฒเคฟเค fallback เคฆเคฟเคเคพเคจเฅ เคเฅ เคฒเคฟเคเฅค
import { ErrorBoundary } from "react-error-boundary"; // ErrorBoundary: เคเคเคฐ เคเฅเค error เคเค เคคเฅ fallback UI เคฆเคฟเคเคพเคจเฅ เคเฅ เคฒเคฟเคเฅค
import { dehydrate, HydrationBoundary } from "@tanstack/react-query"; // dehydrate เคเคฐ HydrationBoundary: SSR (server-side rendering) เคฎเฅเค React Query เคเคพ เคกเฅเคเคพ hydrate เคเคฐเคจเฅ เคเฅ เคฒเคฟเคเฅค

import { getQueryClient, trpc } from "@/trpc/server"; //getQueryClient(): React Query เคเคพ server-side client เคฆเฅเคคเคพ เคนเฅเฅค

import {
  AgentsView,
  AgentsViewError,
  AgentsViewLoading,
} from "@/modules/agents/ui/views/agents-view";
import AgentListHeader from "@/modules/agents/ui/components/agent-list-header";
import { auth } from "@/lib/auth";
import { headers } from "next/headers"; // headers(): server เคชเคฐ current HTTP headers access เคเคฐเคคเคพ เคนเฅเฅค
import { redirect } from "next/navigation"; // redirect(): server เคชเคฐ เคคเฅเคฐเคเคค redirect เคเคฐเคคเคพ เคนเฅเฅค

const Page = async () => {
  //   ๐น เคธเคฌเคธเฅ เคชเคนเคฒเฅ:
  // - เคฏเคน check เคเคฐเคคเคพ เคนเฅ เคเคฟ current user logged in เคนเฅ เคฏเคพ เคจเคนเฅเคเฅค
  // - auth.api.getSession() headers เคเฅ เคธเคพเคฅ session เคฆเฅเคคเคพ เคนเฅเฅค
  const session = await auth.api.getSession({
    headers: await headers(),
  });

  // ๐น เคเคเคฐ session เคจเคนเฅเค เคฎเคฟเคฒเคพ (user เคฒเฅเคเคเคจ เคจเคนเฅเค เคนเฅ), เคคเฅ เคเคธเฅ /auth/sign-in เคชเฅเค เคชเคฐ เคญเฅเค เคฆเคฟเคฏเคพ เคเคพเคคเคพ เคนเฅเฅค
  if (!session) {
    redirect("/auth/sign-in");
  }

  //   ๐น เคเคเคฐ user authenticated เคนเฅ:
  // - เคเค React Query client เคฌเคจเคพเคฏเคพ เคเคพเคคเคพ เคนเฅเฅค
  // - trpc.agents.getMany query เคเฅ เคชเคนเคฒเฅ เคธเฅ เคนเฅ prefetch เคเคฐ เคฒเคฟเคฏเคพ เคเคพเคคเคพ เคนเฅ เคคเคพเคเคฟ page เคคเฅเคเคผเฅ เคธเฅ load เคนเฅเฅค

  const queryClient = getQueryClient();
  void queryClient.prefetchQuery(trpc.agents.getMany.queryOptions());

  return (
    <>
      <AgentListHeader />
      <HydrationBoundary state={dehydrate(queryClient)}>
        <Suspense fallback={<AgentsViewLoading />}>
          <ErrorBoundary fallback={<AgentsViewError />}>
            <AgentsView />
          </ErrorBoundary>
        </Suspense>
      </HydrationBoundary>
    </>
  );
};

export default Page;

// 1: เคชเคนเคฒเฅ user เคเฅ authentication เคเฅเค เคเคฐเคคเคพ เคนเฅเฅค

// 2: เคเคเคฐ user เคฒเฅเคเคเคจ เคจเคนเฅเค เคนเฅ, เคคเฅ sign-in เคชเฅเค เคชเคฐ redirect เคเคฐเคคเคพ เคนเฅเฅค

// 3: เคเคเคฐ เคฒเฅเคเคเคจ เคนเฅ, เคคเฅ:

// - React Query เคธเฅ data เคเฅ prefetch เคเคฐเคคเคพ เคนเฅเฅค

// - View เคเฅ Suspense เคเคฐ Error Boundary เคเฅ เคธเคพเคฅ render เคเคฐเคคเคพ เคนเฅเฅค

// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โ     User visits page        โ
// โโโโโโโโโโโโโโฌโโโโโโโโโโโโโโโโโ
//              โ
//              โผ
// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โ Get session from auth API   โ
// โ using request headers       โ
// โโโโโโโโโโโโโโฌโโโโโโโโโโโโโโโโโ
//              โ
//      โโโโโโโโโผโโโโโโโโโโโ
//      โ session exists?  โ
//      โโโโโโโโโฌโโโโโโโโโโโ
//              โ Yes                    No
//              โผ                         โผ
// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ   โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โ Prefetch agents list query  โ   โ redirect("/auth/sign-in")  โ
// โ using React Query + TRPC    โ   โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โโโโโโโโโโโโโโฌโโโโโโโโโโโโโโโโโ
//              โ
//              โผ
// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โ <AgentListHeader />                                โ
// โ <HydrationBoundary>                                โ
// โ   <Suspense fallback={<AgentsViewLoading />}>      โ
// โ     <ErrorBoundary fallback={<AgentsViewError />}> โ
// โ       <AgentsView />                               โ
// โ     </ErrorBoundary>                               โ
// โ   </Suspense>                                      โ
// โ </HydrationBoundary>                               โ
// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
